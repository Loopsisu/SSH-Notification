#!/bin/bash

# ==============================================================================
# SSH Login Notifier for Bark - Installation Script (Robust Final Version)
# Author: Your Name
# GitHub: https://github.com/your-username/your-repo
# Description: This version uses a more reliable PAM configuration to ensure
#              the notification script is triggered correctly.
# ==============================================================================

# --- 颜色定义 ---
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# --- 脚本变量 ---
NOTIFY_SCRIPT_PATH="/usr/local/bin/ssh_login_notify.sh"
PAM_SSHD_CONFIG="/etc/pam.d/sshd"

# 1. 权限检查
if [ "$(id -u)" -ne 0 ]; then
  echo -e "${RED}错误：此脚本必须以 root 用户权限运行。${NC}"
  echo -e "请尝试使用: ${YELLOW}sudo ./install.sh${NC}"
  exit 1
fi

# 2. 依赖检查
if ! command -v curl &> /dev/null; then
  echo -e "${RED}错误：依赖 'curl' 未安装。${NC}"
  echo -e "请先安装 curl: ${YELLOW}sudo apt update && sudo apt install -y curl${NC} (Debian/Ubuntu)${NC}"
  exit 1
fi

# 3. 欢迎信息与交互式输入
echo -e "${GREEN}=== SSH 登录 Bark 推送通知安装程序 ===${NC}"
echo "此脚本将配置系统，在每次 SSH 成功登录时发送一条 Bark 通知。"
echo ""

# 3.1 输入 Bark Key
read -p "请输入您的 Bark Key (例如: abcdefg123456): " BARK_KEY
if [ -z "$BARK_KEY" ]; then
  echo -e "${RED}错误：Bark Key 不能为空。安装已中止。${NC}"
  exit 1
fi

# 3.2 输入 Bark URL
echo ""
read -p "请输入您的 Bark 服务器 URL [留空则使用官方服务器]: " BARK_URL

# --- 配置与确认 ---

# 4. 处理 Bark URL
if [ -z "$BARK_URL" ]; then
  BARK_URL="https://api.day.app/"
  echo -e "${YELLOW}您未提供 URL，将使用官方 Bark 服务器: ${NC}${BARK_URL}"
else
  if [[ "${BARK_URL}" != */ ]]; then
    BARK_URL="${BARK_URL}/"
  fi
  echo -e "${GREEN}已指定使用您的私有 Bark 服务器: ${NC}${BARK_URL}"
fi

echo ""
echo -e "${GREEN}配置信息确认完毕，正在安装...${NC}"

# 5. 创建推送脚本 (已修复)
# [关键修复] 脚本现在检查从 pam_exec.so 传递的第一个参数 ($1)
# 而不是依赖不稳定的 $PAM_TYPE 环境变量。
tee "$NOTIFY_SCRIPT_PATH" > /dev/null <<EOF
#!/bin/bash
# This script is automatically generated by install.sh (Robust Version)

# --- User Configuration ---
BARK_KEY="${BARK_KEY}"
BARK_URL="${BARK_URL}"

# --- Script Logic ---
# pam_exec.so passes arguments from the PAM config. We only act on 'open_session'.
# This is more reliable than checking the \$PAM_TYPE environment variable.
if [[ "\$1" != "open_session" ]]; then
  exit 0
fi

# The PAM environment variables PAM_USER and PAM_RHOST are usually set by other modules.
TITLE="✅ SSH 登录成功"
HOSTNAME=\$(hostname)
DATE=\$(date "+%Y-%m-%d %H:%M:%S")
BODY="用户: \${PAM_USER}\n来源IP: \${PAM_RHOST}\n主机: \${HOSTNAME}\n时间: \${DATE}"

# 发送通知到 Bark 服务器
curl --silent --output /dev/null \\
  -G "\${BARK_URL}\${BARK_KEY}" \\
  --data-urlencode "title=\${TITLE}" \\
  --data-urlencode "body=\${BODY}" \\
  -d "icon=https://cdn.jsdelivr.net/gh/walkxcode/dashboard-icons/png/terminal.png" \\
  -d "group=服务器登录"

exit 0
EOF

# 6. 设置脚本权限
chmod +x "$NOTIFY_SCRIPT_PATH"
echo "通知脚本已创建于: ${NOTIFY_SCRIPT_PATH}"

# 7. 配置 PAM (已修复)
# [关键修复] 定义将要添加的、更可靠的 PAM 配置行
PAM_LINE="session    optional     pam_exec.so quiet ${NOTIFY_SCRIPT_PATH} open_session"

# 检查是否已存在完全相同的配置，避免重复添加
if grep -qF -- "${PAM_LINE}" "${PAM_SSHD_CONFIG}"; then
  echo -e "${YELLOW}警告：PAM 配置已存在，无需重复添加。${NC}"
else
  # 创建备份
  cp "${PAM_SSHD_CONFIG}" "${PAM_SSHD_CONFIG}.bak.install.$(date +%F_%T)"
  echo "PAM 配置文件备份已创建。"
  # 在文件末尾添加配置
  echo "" >> "${PAM_SSHD_CONFIG}"
  echo "# SSH Login Notifier for Bark - Added by install.sh" >> "${PAM_SSHD_CONFIG}"
  echo "${PAM_LINE}" >> "${PAM_SSHD_CONFIG}"
  echo -e "${GREEN}PAM 配置已成功更新。${NC}"
fi

# 8. 完成提示
echo ""
echo -e "${GREEN}🎉 恭喜！安装已成功完成！${NC}"
echo "现在，每次通过 SSH 登录此服务器时，您都会收到一条 Bark 通知。"
echo -e "为了使配置生效，建议您 ${YELLOW}重启 SSH 服务${NC} (例如: sudo systemctl restart sshd) 或重新登录。"
echo -e "要卸载此功能，请编辑 ${YELLOW}${PAM_SSHD_CONFIG}${NC} 文件，移除相关行，并删除 ${YELLOW}${NOTIFY_SCRIPT_PATH}${NC} 脚本。"

exit 0
